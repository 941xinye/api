<?php
namespace app\backend\libs;

use app\models\CommonVerifycode;
use yii\base\Component;

/**
 * Class Common
 * @package app\backend\libs
 */
class Common extends Component
{
    public $redis;
    public function init()
    {
        $this->redis = \Yii::$app->redis;
        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * 获取客户端IP地址
     * @param integer $type 返回类型 0 返回IP地址 1 返回IPV4地址数字
     * @param boolean $adv 是否进行高级模式获取（有可能被伪装）
     * @return mixed
     */
    public function get_client_ip($type = 0, $adv = false)
    {
        $type      = $type ? 1 : 0;
        static $ip = null;
        if ($ip !== null) {
            return $ip[$type];
        }

        if ($adv) {
            if (isset($_SERVER['HTTP_X_FORWARDED_FOR'])) {
                $arr = explode(',', $_SERVER['HTTP_X_FORWARDED_FOR']);
                $pos = array_search('unknown', $arr);
                if (false !== $pos) {
                    unset($arr[$pos]);
                }

                $ip = trim($arr[0]);
            } elseif (isset($_SERVER['HTTP_CLIENT_IP'])) {
                $ip = $_SERVER['HTTP_CLIENT_IP'];
            } elseif (isset($_SERVER['REMOTE_ADDR'])) {
                $ip = $_SERVER['REMOTE_ADDR'];
            }
        } elseif (isset($_SERVER['REMOTE_ADDR'])) {
            $ip = $_SERVER['REMOTE_ADDR'];
        }
        // IP地址合法验证
        $long = sprintf("%u", ip2long($ip));
        $ip   = $long ? array($ip, $long) : array('0.0.0.0', 0);
        return $ip[$type];
    }

    public function generateCode()
    {
        //生成验证码
        $code = rand(100000, 999999);
        //各种替换
        $code = str_replace('1989', '9819', $code);
        $code = str_replace('1259', '9521', $code);
        $code = str_replace('12590', '09521', $code);
        $code = str_replace('10086', '68001', $code);
        return $code;
    }

    public function lastNWeek($ts, $n, $format = '%Y-%m-%d')
    {
        $ts = (int) ($ts);
        $n  = abs((int) ($n));

        // 周一到周日分别为1-7
        $dayOfWeek = date('w', $ts);

        if (0 == $dayOfWeek) {
            $dayOfWeek = 7;
        }

        $lastNMonday = 7 * $n + $dayOfWeek - 1;
        $lastNSunday = 7 * ($n - 1) + $dayOfWeek;
        return array(
            strftime($format, strtotime("-{$lastNMonday} day", $ts)),
            strftime($format, strtotime("-{$lastNSunday} day", $ts)),
        );
    }

    public function nextNWeek($ts, $n, $format = '%Y-%m-%d')
    {
        $ts = (int) ($ts);
        $n  = abs((int) ($n));

        // 周一到周日分别为1-7
        $dayOfWeek = date('w', $ts);

        if (0 == $dayOfWeek) {
            $dayOfWeek = 7;
        }

        $lastNMonday = 7 * $n + $dayOfWeek - 1;
        $lastNSunday = 7 * ($n + 1) + $dayOfWeek - 2;
        return array(
            strftime($format, strtotime("+{$lastNMonday} day", $ts)),
            strftime($format, strtotime("+{$lastNSunday} day", $ts)),
        );
    }

    /**
     * 随机字符串生成
     */
    public function get_rand_str($l)
    {
        $chars    = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        $password = "";
        while (strlen($password) < $l) {
            $password .= substr($chars, (mt_rand() % strlen($chars)), 1);
        }

        return $password;
    }

    /**
     * 接口输出
     * @param $code
     * @param $msg
     * @param array $data
     * @param string $status
     */
    public static function exit_json($code, $msg, $status = 'fail', $data = [])
    {
        header("Access-Control-Allow-Origin:*");
        exit(json_encode(['status' => $status, 'code' => $code, 'msg' => $msg, 'data' => $data]));
    }

    /**
     * 判断手机号是否正确
     * @param $user_mobile
     * @return bool
     */
    public static function is_mobile($user_mobile)
    {
        $chars = "/^((\(\d{2,3}\))|(\d{3}\-))?1(3|4|5|7|8)\d{9}$/";

        if (preg_match($chars, $user_mobile)) {
            return true;
        } else {
            return false;
        }
    }

    //发送验证码
    public function sendNotifyCode($mobile)
    {

        if (self::is_mobile($mobile)) {
            //生成验证码
            $common = $this;
            $code   = $common->generateCode();
            $ip     = $common->get_client_ip();

            $verifyModel = new CommonVerifycode();
            //先失效
            $verifyModel->invalidCode($mobile);

            $verifyModel->mobile     = $mobile;
            $verifyModel->getip      = $ip;
            $verifyModel->verifycode = $code;
            $verifyModel->dateline   = time();
            if ($verifyModel->save()) {
                //短信发送调用
                $parm           = array();
                $parm['mobile'] = $mobile;
                $parm['code']   = $code;
                $parm['ip']     = $ip;

//                $mod                = new NotifySms();
//                $mod->type          = 'vcode';
//                $mod->data          = [];
//                $parm['mem_mobile'] = $mobile;
//                $parm['send_type']  = 1;
//                $mod->data[]        = $parm;
//                NotifyService::pushSendSms($mod);
                return [
                    'code' => 1,
                    'msg'  => '发送成功',
                ];
            } else {
                return [
                    'code' => -2,
                    'msg'  => '发送失败',
                ];
            }
        } else {
            return [
                'code' => -3,
                'msg'  => '请填写正确的手机号',
            ];
        }
    }

    /**
     * 轮询权重
     * @param array $weight 权重 例如array('a'=>200,'b'=>300,'c'=>500)
     * @return string key 键名
     */
    public function rollWeight($weight = array())
    {
        $roll    = rand(1, array_sum($weight));
        $_tmpW   = 0;
        $rollnum = 0;
        foreach ($weight as $k => $v) {
            $min = $_tmpW;
            $_tmpW += $v;
            $max = $_tmpW;
            if ($roll > $min && $roll <= $max) {
                $rollnum = $k;
                break;
            }
        }
        return $rollnum;
    }
}
